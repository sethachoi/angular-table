{
    "pipes": [],
    "interfaces": [
        {
            "name": "TableState",
            "id": "interface-TableState-507a0a0eb0a11775da2b70eea40fd12f",
            "file": "projects/ng-table/src/lib/ng-table.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { ComponentStore } from '@ngrx/component-store'\r\nimport { Observable } from 'rxjs'\r\nimport { ColType, SortType } from './types'\r\n\r\nexport interface TableState {\r\n  items: any[]\r\n  colDefs: ColType[]\r\n  primaryKey: string\r\n  defaultItems: any[]\r\n  sortRules: SortType[]\r\n  filterCol: ColType | {}\r\n  filterString: string\r\n}\r\n\r\n@Injectable()\r\nexport class TableStore extends ComponentStore<TableState> {\r\n  constructor() {\r\n    super({\r\n      items: [],\r\n      colDefs: [],\r\n      primaryKey: 'id',\r\n      defaultItems: [],\r\n      sortRules: [],\r\n      filterCol: {},\r\n      filterString: ''\r\n    })\r\n  }\r\n\r\n  // the bread and butter, our table's data\r\n  readonly items$: Observable<any[]> = this.select(state => {\r\n    const { filterString, filterCol, items } = state\r\n\r\n    // we return the whole set if no filters, apply filters if we have them\r\n    if (!filterString || !(filterCol as ColType).key) {\r\n      return items\r\n    } else {\r\n      return this.filterItems(filterString, filterCol as ColType, items)\r\n    }\r\n  })\r\n  // public observables\r\n  readonly colDefs$: Observable<ColType[]> = this.select(state => state.colDefs)\r\n  readonly sortRules$: Observable<SortType[]> = this.select(state => state.sortRules)\r\n  readonly filterString$: Observable<string> = this.select(state => state.filterString)\r\n  readonly filterCol$: Observable<ColType | {}> = this.select(state => state.filterCol)\r\n\r\n  // public full-replace setters\r\n  readonly setFilterString = this.updater((state, newString: string) => ({\r\n    ...state,\r\n    filterString: newString\r\n  }))\r\n\r\n  readonly setFilterCol = this.updater((state, newCol: ColType) => ({\r\n    ...state,\r\n    filterCol: { ...newCol }\r\n  }))\r\n\r\n  readonly setColDefs = this.updater((state, newCols: ColType[]) => ({\r\n    ...state,\r\n    colDefs: newCols\r\n  }))\r\n\r\n  readonly setSortRules = this.updater((state, newSort: SortType[]) => ({\r\n    ...state,\r\n    sortRules: [...newSort]\r\n  }))\r\n\r\n  readonly setItems = this.updater((state, newItems: any[]) => {\r\n    const { sortRules } = state\r\n\r\n    // when new data comes in, be sure to resort the items\r\n    // in case we have sorting rules that need applying\r\n    const newSortedData = this.resortItems(newItems, sortRules)\r\n    return {\r\n      ...state,\r\n      items: newSortedData\r\n    }\r\n  })\r\n\r\n  readonly setDefaultItems = this.updater((state, newDefaults: any[]) => ({\r\n    ...state,\r\n    defaultItems: [...newDefaults]\r\n  }))\r\n\r\n  // public method to apply a sort rule simply by passing the colkey\r\n  // (for example, 'id' or 'name')\r\n  readonly sortBy = this.updater((state, colKey: string) => {\r\n    const { sortRules, items, defaultItems } = state\r\n    const ruleIndex = sortRules.findIndex(rule => rule.key === colKey)\r\n    let newRules = []\r\n    let newRule = {}\r\n    // case: we are creating a new rule wow\r\n    if (ruleIndex === -1) {\r\n      newRule = {\r\n        key: colKey,\r\n        direction: 'asc'\r\n      }\r\n      newRules = [...sortRules, newRule]\r\n    } else if (sortRules[ruleIndex].direction === 'asc') {\r\n      // if there exists a rule for this key, and it is asc, swap to desc\r\n      newRule = {\r\n        key: colKey,\r\n        direction: 'desc'\r\n      }\r\n      newRules = [...sortRules]\r\n      newRules[ruleIndex] = newRule\r\n    } else {\r\n      // if the existing rule is desc, we want to just remove the rule altogether\r\n      newRules = [...sortRules.filter(rule => rule.key !== colKey)]\r\n    }\r\n\r\n    // if we have just removed all of our sorting rules, let's bring it back to the default view,\r\n    // AKA the order of data we got from the API\r\n    const newItems = newRules.length === 0 ? [...defaultItems] : this.resortItems(items, newRules)\r\n    return {...state, sortRules: newRules, items: newItems}\r\n  })\r\n\r\n  // start sorting recursion algo\r\n  private resortItems = (itemsToSort: any[], sortRuleList: SortType[]): any[] =>\r\n    [...itemsToSort].sort((a, b) => this.compareItems(a, b, sortRuleList, 0))\r\n\r\n  private compareItems = (a: any, b: any, rules: SortType[], ruleIndex: number): number => {\r\n    // if these two objects are identical across all rule filters,\r\n    // we can just return order arbitrarily\r\n    if (ruleIndex >= rules.length) {\r\n      return 1\r\n    }\r\n    const currentRule = rules[ruleIndex]\r\n    const returnVal = currentRule.direction === 'asc' ? 1 : -1\r\n\r\n    // if the compare values are the same, move on to the next sort rule\r\n    // to deal with the tiebreaker, ad infinitum\r\n    if (a[currentRule.key] === b[currentRule.key]) {\r\n      const nextIndex = ruleIndex + 1\r\n      return this.compareItems(a, b, rules, nextIndex)\r\n    }\r\n    return a[currentRule.key] > b[currentRule.key] ? returnVal : -(returnVal)\r\n  }\r\n\r\n  // here we apply a filterString + filterCol ruleset\r\n  private filterItems = (filterString: string, filterCol: ColType, items: any[]) =>\r\n    items.filter(item => {\r\n      const testValue = item[filterCol.key]\r\n      // we are looking for the exact number if given a number type\r\n      if (filterCol.type === 'number') {\r\n        return testValue === parseInt(filterString, 10)\r\n      } else {\r\n        // if we are given a string type, look to see if that order of chars exists\r\n        // anywhere each entry, disregarding spacing or letter case\r\n        return testValue.replace(/[^0-9a-z]/gi, '')\r\n          .toLowerCase()\r\n          .includes(filterString.replace(/[^0-9a-z]/gi, '').toLowerCase())\r\n      }\r\n    })\r\n}\r\n",
            "properties": [
                {
                    "name": "colDefs",
                    "type": "ColType[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "defaultItems",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "filterCol",
                    "type": "ColType | literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "filterString",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "items",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "primaryKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "sortRules",
                    "type": "SortType[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "PeopleService",
            "id": "injectable-PeopleService-9e7448245da015349cd223530efa888c",
            "file": "projects/exampleApp/src/services/people.service.ts",
            "properties": [
                {
                    "name": "fetchPeople",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { Store } from '@ngrx/store'\r\nimport { PersonType } from '../types'\r\nimport { getData } from '../api'\r\nimport { setData, setLoading } from '../state'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PeopleService {\r\n  constructor(private store: Store<PersonType[]>) {}\r\n\r\n  // makes a call to our super fake API\r\n  fetchPeople = async () => {\r\n    this.store.dispatch(setLoading({ loading: true }))\r\n    const request = await getData()\r\n    this.store.dispatch(setData(request))\r\n    this.store.dispatch(setLoading({ loading: false }))\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<PersonType[]>"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<PersonType[]>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "QueryFilterService",
            "id": "injectable-QueryFilterService-abbd00df8096b65b9052bbd79bcf2fae",
            "file": "projects/exampleApp/src/services/queryFilter.service.ts",
            "properties": [
                {
                    "name": "applyQueryFilters",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "decodeQueryFilters",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "getQueryFilters",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "setQueryFilter",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sortFilters",
                    "defaultValue": "[]",
                    "type": "SortType[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { SortType } from 'ng-table'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QueryFilterService {\r\n  private sortFilters: SortType[] = []\r\n  constructor() {}\r\n\r\n  // this will convert our sort obj to push a querystring to window url\r\n  applyQueryFilters = async (filterItems: SortType[]) => {\r\n    this.setQueryFilter(filterItems)\r\n    // sending back empty filters is a valid new state\r\n    let newUrl = window.location.protocol\r\n      + '//' + window.location.host + window.location.pathname\r\n\r\n    if (filterItems.length) {\r\n      const params = new URLSearchParams()\r\n      filterItems.forEach(filter => {\r\n        params.set(filter.key, filter.direction)\r\n      })\r\n      newUrl = `${newUrl}?${params.toString()}`\r\n    }\r\n\r\n    window.history.pushState({path: newUrl}, '', newUrl)\r\n  }\r\n\r\n  // we also will need to convert our URL query params into digestible SortTypes\r\n  decodeQueryFilters = (): SortType[] => {\r\n    const params = new URLSearchParams(window.location.search)\r\n    const newSortFilters = []\r\n    params.forEach((value, key) => {\r\n      newSortFilters.push({ key, direction: value })\r\n    })\r\n    this.setQueryFilter(newSortFilters)\r\n    return newSortFilters\r\n  }\r\n\r\n  private setQueryFilter = (newFilters: SortType[]) => {\r\n    this.sortFilters = [...newFilters]\r\n  }\r\n\r\n  // public api\r\n  getQueryFilters = (): SortType[] => {\r\n    return this.sortFilters as SortType[]\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "TableStore",
            "id": "injectable-TableStore-507a0a0eb0a11775da2b70eea40fd12f",
            "file": "projects/ng-table/src/lib/ng-table.store.ts",
            "properties": [
                {
                    "name": "colDefs$",
                    "defaultValue": "this.select(state => state.colDefs)",
                    "type": "Observable<ColType[]>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "compareItems",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "filterCol$",
                    "defaultValue": "this.select(state => state.filterCol)",
                    "type": "Observable<ColType | literal type>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "filterItems",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "filterString$",
                    "defaultValue": "this.select(state => state.filterString)",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "items$",
                    "defaultValue": "this.select(state => {\r\n    const { filterString, filterCol, items } = state\r\n\r\n    // we return the whole set if no filters, apply filters if we have them\r\n    if (!filterString || !(filterCol as ColType).key) {\r\n      return items\r\n    } else {\r\n      return this.filterItems(filterString, filterCol as ColType, items)\r\n    }\r\n  })",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "resortItems",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setColDefs",
                    "defaultValue": "this.updater((state, newCols: ColType[]) => ({\r\n    ...state,\r\n    colDefs: newCols\r\n  }))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "setDefaultItems",
                    "defaultValue": "this.updater((state, newDefaults: any[]) => ({\r\n    ...state,\r\n    defaultItems: [...newDefaults]\r\n  }))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "setFilterCol",
                    "defaultValue": "this.updater((state, newCol: ColType) => ({\r\n    ...state,\r\n    filterCol: { ...newCol }\r\n  }))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "setFilterString",
                    "defaultValue": "this.updater((state, newString: string) => ({\r\n    ...state,\r\n    filterString: newString\r\n  }))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "setItems",
                    "defaultValue": "this.updater((state, newItems: any[]) => {\r\n    const { sortRules } = state\r\n\r\n    // when new data comes in, be sure to resort the items\r\n    // in case we have sorting rules that need applying\r\n    const newSortedData = this.resortItems(newItems, sortRules)\r\n    return {\r\n      ...state,\r\n      items: newSortedData\r\n    }\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "setSortRules",
                    "defaultValue": "this.updater((state, newSort: SortType[]) => ({\r\n    ...state,\r\n    sortRules: [...newSort]\r\n  }))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "sortBy",
                    "defaultValue": "this.updater((state, colKey: string) => {\r\n    const { sortRules, items, defaultItems } = state\r\n    const ruleIndex = sortRules.findIndex(rule => rule.key === colKey)\r\n    let newRules = []\r\n    let newRule = {}\r\n    // case: we are creating a new rule wow\r\n    if (ruleIndex === -1) {\r\n      newRule = {\r\n        key: colKey,\r\n        direction: 'asc'\r\n      }\r\n      newRules = [...sortRules, newRule]\r\n    } else if (sortRules[ruleIndex].direction === 'asc') {\r\n      // if there exists a rule for this key, and it is asc, swap to desc\r\n      newRule = {\r\n        key: colKey,\r\n        direction: 'desc'\r\n      }\r\n      newRules = [...sortRules]\r\n      newRules[ruleIndex] = newRule\r\n    } else {\r\n      // if the existing rule is desc, we want to just remove the rule altogether\r\n      newRules = [...sortRules.filter(rule => rule.key !== colKey)]\r\n    }\r\n\r\n    // if we have just removed all of our sorting rules, let's bring it back to the default view,\r\n    // AKA the order of data we got from the API\r\n    const newItems = newRules.length === 0 ? [...defaultItems] : this.resortItems(items, newRules)\r\n    return {...state, sortRules: newRules, items: newItems}\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "sortRules$",
                    "defaultValue": "this.select(state => state.sortRules)",
                    "type": "Observable<SortType[]>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { ComponentStore } from '@ngrx/component-store'\r\nimport { Observable } from 'rxjs'\r\nimport { ColType, SortType } from './types'\r\n\r\nexport interface TableState {\r\n  items: any[]\r\n  colDefs: ColType[]\r\n  primaryKey: string\r\n  defaultItems: any[]\r\n  sortRules: SortType[]\r\n  filterCol: ColType | {}\r\n  filterString: string\r\n}\r\n\r\n@Injectable()\r\nexport class TableStore extends ComponentStore<TableState> {\r\n  constructor() {\r\n    super({\r\n      items: [],\r\n      colDefs: [],\r\n      primaryKey: 'id',\r\n      defaultItems: [],\r\n      sortRules: [],\r\n      filterCol: {},\r\n      filterString: ''\r\n    })\r\n  }\r\n\r\n  // the bread and butter, our table's data\r\n  readonly items$: Observable<any[]> = this.select(state => {\r\n    const { filterString, filterCol, items } = state\r\n\r\n    // we return the whole set if no filters, apply filters if we have them\r\n    if (!filterString || !(filterCol as ColType).key) {\r\n      return items\r\n    } else {\r\n      return this.filterItems(filterString, filterCol as ColType, items)\r\n    }\r\n  })\r\n  // public observables\r\n  readonly colDefs$: Observable<ColType[]> = this.select(state => state.colDefs)\r\n  readonly sortRules$: Observable<SortType[]> = this.select(state => state.sortRules)\r\n  readonly filterString$: Observable<string> = this.select(state => state.filterString)\r\n  readonly filterCol$: Observable<ColType | {}> = this.select(state => state.filterCol)\r\n\r\n  // public full-replace setters\r\n  readonly setFilterString = this.updater((state, newString: string) => ({\r\n    ...state,\r\n    filterString: newString\r\n  }))\r\n\r\n  readonly setFilterCol = this.updater((state, newCol: ColType) => ({\r\n    ...state,\r\n    filterCol: { ...newCol }\r\n  }))\r\n\r\n  readonly setColDefs = this.updater((state, newCols: ColType[]) => ({\r\n    ...state,\r\n    colDefs: newCols\r\n  }))\r\n\r\n  readonly setSortRules = this.updater((state, newSort: SortType[]) => ({\r\n    ...state,\r\n    sortRules: [...newSort]\r\n  }))\r\n\r\n  readonly setItems = this.updater((state, newItems: any[]) => {\r\n    const { sortRules } = state\r\n\r\n    // when new data comes in, be sure to resort the items\r\n    // in case we have sorting rules that need applying\r\n    const newSortedData = this.resortItems(newItems, sortRules)\r\n    return {\r\n      ...state,\r\n      items: newSortedData\r\n    }\r\n  })\r\n\r\n  readonly setDefaultItems = this.updater((state, newDefaults: any[]) => ({\r\n    ...state,\r\n    defaultItems: [...newDefaults]\r\n  }))\r\n\r\n  // public method to apply a sort rule simply by passing the colkey\r\n  // (for example, 'id' or 'name')\r\n  readonly sortBy = this.updater((state, colKey: string) => {\r\n    const { sortRules, items, defaultItems } = state\r\n    const ruleIndex = sortRules.findIndex(rule => rule.key === colKey)\r\n    let newRules = []\r\n    let newRule = {}\r\n    // case: we are creating a new rule wow\r\n    if (ruleIndex === -1) {\r\n      newRule = {\r\n        key: colKey,\r\n        direction: 'asc'\r\n      }\r\n      newRules = [...sortRules, newRule]\r\n    } else if (sortRules[ruleIndex].direction === 'asc') {\r\n      // if there exists a rule for this key, and it is asc, swap to desc\r\n      newRule = {\r\n        key: colKey,\r\n        direction: 'desc'\r\n      }\r\n      newRules = [...sortRules]\r\n      newRules[ruleIndex] = newRule\r\n    } else {\r\n      // if the existing rule is desc, we want to just remove the rule altogether\r\n      newRules = [...sortRules.filter(rule => rule.key !== colKey)]\r\n    }\r\n\r\n    // if we have just removed all of our sorting rules, let's bring it back to the default view,\r\n    // AKA the order of data we got from the API\r\n    const newItems = newRules.length === 0 ? [...defaultItems] : this.resortItems(items, newRules)\r\n    return {...state, sortRules: newRules, items: newItems}\r\n  })\r\n\r\n  // start sorting recursion algo\r\n  private resortItems = (itemsToSort: any[], sortRuleList: SortType[]): any[] =>\r\n    [...itemsToSort].sort((a, b) => this.compareItems(a, b, sortRuleList, 0))\r\n\r\n  private compareItems = (a: any, b: any, rules: SortType[], ruleIndex: number): number => {\r\n    // if these two objects are identical across all rule filters,\r\n    // we can just return order arbitrarily\r\n    if (ruleIndex >= rules.length) {\r\n      return 1\r\n    }\r\n    const currentRule = rules[ruleIndex]\r\n    const returnVal = currentRule.direction === 'asc' ? 1 : -1\r\n\r\n    // if the compare values are the same, move on to the next sort rule\r\n    // to deal with the tiebreaker, ad infinitum\r\n    if (a[currentRule.key] === b[currentRule.key]) {\r\n      const nextIndex = ruleIndex + 1\r\n      return this.compareItems(a, b, rules, nextIndex)\r\n    }\r\n    return a[currentRule.key] > b[currentRule.key] ? returnVal : -(returnVal)\r\n  }\r\n\r\n  // here we apply a filterString + filterCol ruleset\r\n  private filterItems = (filterString: string, filterCol: ColType, items: any[]) =>\r\n    items.filter(item => {\r\n      const testValue = item[filterCol.key]\r\n      // we are looking for the exact number if given a number type\r\n      if (filterCol.type === 'number') {\r\n        return testValue === parseInt(filterString, 10)\r\n      } else {\r\n        // if we are given a string type, look to see if that order of chars exists\r\n        // anywhere each entry, disregarding spacing or letter case\r\n        return testValue.replace(/[^0-9a-z]/gi, '')\r\n          .toLowerCase()\r\n          .includes(filterString.replace(/[^0-9a-z]/gi, '').toLowerCase())\r\n      }\r\n    })\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "extends": "ComponentStore",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-05ed137bad54aa682bf8c4b1971cd0c0",
            "file": "projects/exampleApp/e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor'\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DropdownDirective",
            "id": "directive-DropdownDirective-b388c614617c149e41537248f7c8a068",
            "file": "projects/ng-table/src/lib/components/searchInput/directives/dropdownDirective/index.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Inject, forwardRef, HostBinding, HostListener } from '@angular/core'\r\n\r\n@Directive({\r\n  selector: '[uiDropdownMenu]'\r\n})\r\nexport class DropdownMenuDirective {\r\n  constructor(@Inject(forwardRef(() => DropdownDirective)) public dropdown) {}\r\n  @HostBinding('class.ng-dropdown-menu') menuClass = true\r\n\r\n  // attaching showing class via our controlling directive's bool\r\n  @HostBinding('class.showing')\r\n  get isShowing(): boolean { return this.dropdown.isShowing() }\r\n\r\n  // same with hiding (mostly useful for animation overrides)\r\n  @HostBinding('class.hiding')\r\n  get isHiding(): boolean { return !this.dropdown.isShowing() }\r\n}\r\n\r\n@Directive({\r\n  selector: '[uiDropdown]'\r\n})\r\nexport class DropdownDirective {\r\n  showing = false\r\n  constructor(private el: ElementRef) {}\r\n\r\n  // click handler to toggle dropdown\r\n  @HostListener('click')\r\n  toggle = (): void => {\r\n    this.showing = !this.showing\r\n  }\r\n\r\n  isShowing = (): boolean => {\r\n    return this.showing\r\n  }\r\n}\r\n",
            "selector": "[uiDropdown]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 28
                }
            ],
            "propertiesClass": [
                {
                    "name": "isShowing",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "showing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownMenuDirective",
            "id": "directive-DropdownMenuDirective-b388c614617c149e41537248f7c8a068",
            "file": "projects/ng-table/src/lib/components/searchInput/directives/dropdownDirective/index.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Inject, forwardRef, HostBinding, HostListener } from '@angular/core'\r\n\r\n@Directive({\r\n  selector: '[uiDropdownMenu]'\r\n})\r\nexport class DropdownMenuDirective {\r\n  constructor(@Inject(forwardRef(() => DropdownDirective)) public dropdown) {}\r\n  @HostBinding('class.ng-dropdown-menu') menuClass = true\r\n\r\n  // attaching showing class via our controlling directive's bool\r\n  @HostBinding('class.showing')\r\n  get isShowing(): boolean { return this.dropdown.isShowing() }\r\n\r\n  // same with hiding (mostly useful for animation overrides)\r\n  @HostBinding('class.hiding')\r\n  get isHiding(): boolean { return !this.dropdown.isShowing() }\r\n}\r\n\r\n@Directive({\r\n  selector: '[uiDropdown]'\r\n})\r\nexport class DropdownDirective {\r\n  showing = false\r\n  constructor(private el: ElementRef) {}\r\n\r\n  // click handler to toggle dropdown\r\n  @HostListener('click')\r\n  toggle = (): void => {\r\n    this.showing = !this.showing\r\n  }\r\n\r\n  isShowing = (): boolean => {\r\n    return this.showing\r\n  }\r\n}\r\n",
            "selector": "[uiDropdownMenu]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class.hiding",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "class.ng-dropdown-menu",
                    "defaultValue": "true",
                    "line": 8
                },
                {
                    "name": "class.showing",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "dropdown",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "undefined"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dropdown",
                        "type": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "dropdown",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0ee5395411e6e63e7bfa152e80b466b7",
            "file": "projects/exampleApp/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colDefs",
                    "defaultValue": "colDefs",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fetchData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "people$",
                    "type": "Observable<PersonType[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "receiveFilters",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "sortFilters",
                    "defaultValue": "[]",
                    "type": "SortType[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { Store, select } from '@ngrx/store'\nimport { Observable } from 'rxjs'\nimport { SortType } from 'ng-table'\nimport { PeopleService, QueryFilterService } from '../services'\nimport { PersonType } from '../types'\nimport { colDefs } from '../data'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  people$: Observable<PersonType[]>\n  loading$: Observable<boolean>\n  sortFilters: SortType[] = []\n  colDefs = colDefs\n\n  constructor(\n    private peopleService: PeopleService,\n    private queryFilterService: QueryFilterService,\n    private store: Store<{ people: PersonType[], loading: boolean }>\n  ) {\n    this.people$ = store.pipe(select('people'))\n    this.loading$ = store.pipe(select('loading'))\n    // we really only need to do this upon first load tbh;\n    // we are snagging all the query params and matching them\n    // with columns that actually exist on our table\n    const validKeys = colDefs.map(item => item.key)\n    this.sortFilters =\n      [...this.queryFilterService.getQueryFilters().filter((item) => validKeys.includes(item.key))]\n  }\n\n  // table will emit filters at us, we need to pop it to service so we can add to url\n  receiveFilters = (sortFilters: SortType[]) => {\n    this.queryFilterService.applyQueryFilters(sortFilters)\n  }\n\n  // press butan\n  fetchData = () => {\n    this.peopleService.fetchPeople()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@keyframes animatedBackground {\r\n\t0% { background-position: 0 0; }\r\n  50% { background-position: 100% 0; }\r\n  100% { background-position: 0 0; }\r\n}\r\n\r\n@keyframes animatedBackground2 {\r\n\t0% { background-position: 100% 0; }\r\n  50% { background-position: 0 0; }\r\n  100% { background-position: 100% 0; }\r\n}\r\n\r\n.content {\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n\r\n  .inner-content {\r\n    position: absolute;\r\n    top: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-size: cover;\r\n    background-image: url(../assets/background-svg.svg);\r\n    background-repeat: repeat-x;\r\n    animation: animatedBackground 8s linear infinite;\r\n    z-index: -1;\r\n\r\n    .inner-content {\r\n      background-position-x: 100%;\r\n      animation: animatedBackground2 20s linear infinite;\r\n      filter: hue-rotate(-30deg);\r\n      z-index: -2;\r\n    }\r\n\r\n    &.loaded {\r\n      opacity: 0.75;\r\n      transition: opacity 2s ease-out;\r\n      animation-play-state: paused;\r\n      .inner-content {\r\n        opacity: 0.6;\r\n        transition: opacity 2s ease-out;\r\n        animation-play-state: paused;\r\n      }\r\n    }\r\n    &.loading {\r\n      opacity: 0.25;\r\n      transition: opacity 2s ease-in;\r\n      animation-play-state: running;\r\n      .inner-content {\r\n        opacity: 0.25;\r\n        transition: opacity 2s ease-in;\r\n        animation-play-state: running;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.table-container {\r\n  min-width: 1280px;\r\n  padding: 16px;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  background-color: #fafafa;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n  box-shadow:\r\n    0 3px 6px rgba(0,0,0,0.16),\r\n    0 3px 6px rgba(0,0,0,0.23);\r\n}\r\n\r\n.table-component-container {\r\n  z-index: 2;\r\n}\r\n\r\n.fetch-button {\r\n  background-color: #0099ff;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-family: sans-serif;\r\n  top: 26px;\r\n  box-shadow:\r\n    rgba(0, 0, 0, 0.2) 0px 2px 1px -1px,\r\n    rgba(0, 0, 0, 0.14) 0px 1px 1px 0px,\r\n    rgba(0, 0, 0, 0.12) 0px 1px 3px 0px;\r\n  cursor: pointer;\r\n  opacity: 1;\r\n  transform: scale(1.0);\r\n  transition: transform 0.2s ease-in;\r\n  margin-bottom: 8px;\r\n  &:after {\r\n    border-radius: 4px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    box-shadow:\r\n      rgba(0, 0, 0, 0.2) 0px 3px 1px -2px,\r\n      rgba(0, 0, 0, 0.14) 0px 2px 2px 0px,\r\n      rgba(0, 0, 0, 0.12) 0px 1px 5px 0px;\r\n    opacity: 0;\r\n    transition: opacity 0.2s ease-in;\r\n    content: '';\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &:active {\r\n    opacity: 0.5;\r\n    transform: scale(0.9);\r\n    transition: all 0.2s ease-out;\r\n  }\r\n  &:before {\r\n    width: 30px;\r\n    height: 30px;\r\n    z-index: 1;\r\n    top: 0;\r\n    left: 25%;\r\n    mix-blend-mode: soft-light;\r\n    opacity: 0.75;\r\n    border-radius: 90px;\r\n    position: absolute;\r\n    background-color: #0099ff;\r\n    transition: all 0.3s ease-in;\r\n    content: '';\r\n  }\r\n  &.loading:before {\r\n    transform: scale(60);\r\n    transition: all 0.3s ease-out;\r\n  }\r\n\r\n  &:hover:after {\r\n    opacity: 1;\r\n    transition: opacity 0.2s ease-out;\r\n  }\r\n}\r\n\r\n@keyframes breathing {\r\n  0% {\r\n    transform: scale(60)\r\n  }\r\n  25% {\r\n    transform: scale(62)\r\n  }\r\n  50% {\r\n    transform: scale(60)\r\n  }\r\n  75% {\r\n    transform: scale(58)\r\n  }\r\n  100% {\r\n    transform: scale(60)\r\n  }\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "peopleService",
                        "type": "PeopleService"
                    },
                    {
                        "name": "queryFilterService",
                        "type": "QueryFilterService"
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "peopleService",
                        "type": "PeopleService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "queryFilterService",
                        "type": "QueryFilterService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"content\" role=\"main\">\n  <div class=\"inner-content\" [class.loading]=\"(loading$ | async)\" [class.loaded]=\"(loading$ | async) === false\">\n    <div class=\"inner-content\"></div>\n  </div>\n  <div class=\"table-container\">\n    <div class=\"button-container\">\n      <button class=\"fetch-button\"\n        [class.loading]=\"(loading$ | async)\"\n        (click)=\"fetchData()\">Simulate Data Fetch</button>\n    </div>\n    <div class=\"table-component-container\">\n      <ui-ng-table\n        [primaryKey]=\"'id'\"\n        [loading]=\"(loading$ | async)\"\n        [maxHeight]=\"350\"\n        [items]=\"(people$ | async)\"\n        [colDefs]=\"colDefs\"\n        [initialFilters]=\"sortFilters\"\n        (filterUpdate)=\"receiveFilters($event)\"\n        ></ui-ng-table>\n    </div>\n</div>\n\n<router-outlet></router-outlet>"
        },
        {
            "name": "ArrowIconComponent",
            "id": "component-ArrowIconComponent-ac57d2e43f112b76c3b9dd62ae87b9ce",
            "file": "projects/ng-table/src/lib/components/searchInput/components/arrowIcon/arrow-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-arrow-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./arrow-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "defaultValue": "'asc'",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'ui-arrow-icon',\r\n  templateUrl: './arrow-icon.component.html'\r\n})\r\nexport class ArrowIconComponent {\r\n  @Input()\r\n  direction = 'asc'\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"13\" viewBox=\"0 0 24 24\" width=\"13\">\r\n  <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n  <path d=\"M7 10l5 5 5-5z\" />\r\n</svg>"
        },
        {
            "name": "NgTableComponent",
            "id": "component-NgTableComponent-e0c130bf5d3c20807de5aa85227e50c1",
            "file": "projects/ng-table/src/lib/ng-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TableStore"
                }
            ],
            "selector": "ui-ng-table",
            "styleUrls": [
                "./ng-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ng-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colDefs",
                    "line": 23,
                    "type": "[]"
                },
                {
                    "name": "initialFilters",
                    "defaultValue": "[]",
                    "line": 37,
                    "type": "SortType[]"
                },
                {
                    "name": "items",
                    "line": 17,
                    "type": "[]"
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "line": 31
                },
                {
                    "name": "maxHeight",
                    "defaultValue": "350",
                    "line": 34
                },
                {
                    "name": "primaryKey",
                    "defaultValue": "'id'",
                    "line": 28
                }
            ],
            "outputsClass": [
                {
                    "name": "filterUpdate",
                    "defaultValue": "new EventEmitter()",
                    "line": 40,
                    "type": "EventEmitter<SortType[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colDefs$",
                    "defaultValue": "this.tableStore.colDefs$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "colDefSubscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "colsCopy",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "createHeightObj",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "drop",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "filterCol$",
                    "defaultValue": "this.tableStore.filterCol$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "filterString$",
                    "defaultValue": "this.tableStore.filterString$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "items$",
                    "defaultValue": "this.tableStore.items$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "maxHeightForViewport",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "ruleDirection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "ruleIndex",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "sortBy",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "sortRules",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "sortRules$",
                    "defaultValue": "this.tableStore.sortRules$",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "sortRulesSubscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "updateFilterCol",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "updateFilterString",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, OnChanges, Output, EventEmitter } from '@angular/core'\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop'\nimport { TableStore } from './ng-table.store'\nimport { ColType, SortType } from './types'\n\nconst ITEM_SIZE = 34\n\n@Component({\n  selector: 'ui-ng-table',\n  templateUrl: './ng-table.component.html',\n  styleUrls: ['./ng-table.component.scss'],\n  providers: [TableStore]\n})\nexport class NgTableComponent implements OnInit, OnDestroy {\n  // direct inputs\n  @Input()\n  set items(value: any[]) {\n    this.tableStore.setItems(value)\n    this.tableStore.setDefaultItems(value)\n  }\n\n  @Input()\n  set colDefs(value: ColType[]) {\n    this.tableStore.setColDefs(value)\n  }\n\n  @Input()\n  primaryKey = 'id'\n\n  @Input()\n  loading = false\n\n  @Input()\n  maxHeight = 350\n\n  @Input()\n  initialFilters: SortType[] = []\n\n  @Output()\n  filterUpdate: EventEmitter<SortType[]> = new EventEmitter()\n\n  // stuff from store/state\n  sortRules$ = this.tableStore.sortRules$\n  items$ = this.tableStore.items$\n  colDefs$ = this.tableStore.colDefs$\n  filterString$ = this.tableStore.filterString$\n  filterCol$ = this.tableStore.filterCol$\n\n  colsCopy = []\n  sortRules = []\n\n  colDefSubscription\n  sortRulesSubscription\n\n  constructor(private readonly tableStore: TableStore) {}\n\n  ngOnInit(): void {\n    this.colDefSubscription = this.colDefs$.subscribe(data => this.colsCopy = [...data])\n    // make sure initial filters from query params\n    // are applied before emitting state changes\n    if (this.initialFilters.length) {\n      this.tableStore.setSortRules(this.initialFilters)\n      this.sortRules = [...this.initialFilters]\n    }\n\n    this.sortRulesSubscription = this.sortRules$.subscribe(data => {\n      this.filterUpdate.emit(data)\n      return this.sortRules = data\n    })\n\n    this.tableStore.setState(state => ({\n      ...state,\n      primaryKey: this.primaryKey\n    }))\n  }\n\n  // we're gonna wanna unhook those subscriptions\n  ngOnDestroy(): void {\n    this.colDefSubscription.unsubscribe()\n    this.sortRulesSubscription.unsubscribe()\n  }\n\n  // handler for when column is clicked to add a sorting rule\n  sortBy = (colKey) => {\n    this.tableStore.sortBy(colKey)\n  }\n\n  // dropping handler for cdkDragDrop\n  drop = (event: CdkDragDrop<any[]>): void => {\n    // using a copy of columns subscription to simplify moveItemInArray usage\n    const newArrayCopy = [...this.colsCopy]\n    moveItemInArray(newArrayCopy, event.previousIndex, event.currentIndex)\n    this.tableStore.setColDefs(newArrayCopy)\n  }\n\n  // used to find the direction of a col sort rule, to show asc/desc icon\n  ruleDirection = (colKey: string): string => {\n    const foundRule = this.sortRules.find(rule => rule.key === colKey)\n    const direction = foundRule ? foundRule.direction : ''\n    return direction\n  }\n\n  // used to synchronize data between table data and column rules/sorting\n  ruleIndex = (colKey: string): number => this.sortRules.findIndex(rule => rule.key === colKey) + 1\n\n  // used to update the search string, bubbles to state for heavy lifting there\n  updateFilterString = (event: Event) => {\n    this.tableStore.setFilterString((event.target as HTMLInputElement).value)\n  }\n\n  // updates filter rule to use in tandem with filter/search string\n  updateFilterCol = (col: ColType) => {\n    this.tableStore.setFilterCol(col)\n  }\n\n  // this and createHeighObj are used for dynamic styling wizardry\n  // to make sure that A) cdk virtual scroller works and B) we can have nice anims\n  maxHeightForViewport = (data: any[]): number => {\n    if (data.length * ITEM_SIZE < this.maxHeight) {\n      return data.length * ITEM_SIZE\n    }\n    return this.maxHeight\n  }\n\n  // see above\n  createHeightObj = (data: any[]) => {\n    if (this.loading || !data.length) {\n      return {}\n    }\n    return {\n      'max-height.px': this.maxHeightForViewport(data)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$offset: 187;\r\n$duration: 1.4s;\r\n\r\n.cdk-drop-list-dragging .cdk-drag {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.cdk-drag-animating {\r\n  transition: transform 300ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.cdk-drag-preview {\r\n  font-family: sans-serif;\r\n  margin: 18px;\r\n  flex: 0;\r\n  width: 50px;\r\n  padding: 0;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n          0 8px 10px 1px rgba(0, 0, 0, 0.14),\r\n          0 3px 14px 2px rgba(0, 0, 0, 0.12);\r\n  cursor: default;\r\n}\r\n\r\n.ng-table {\r\n  background-color: white;\r\n  font-family: sans-serif;\r\n  box-shadow:\r\n    rgba(0, 0, 0, 0.2) 0px 2px 1px -1px,\r\n    rgba(0, 0, 0, 0.14) 0px 1px 1px 0px,\r\n    rgba(0, 0, 0, 0.12) 0px 1px 3px 0px;\r\n  border-radius: 4px;\r\n  margin-top: 8px;\r\n\r\n  &-header {\r\n    display: flex;\r\n    border-bottom: 1px solid rgba(224, 224, 224, 1)\r\n  }\r\n\r\n  &-column_component {\r\n    min-width: 0;\r\n  }\r\n\r\n  &-col_filter-pill {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 16px;\r\n    margin-left: 8px;\r\n    border: 1px solid grey;\r\n    border-radius: 9px;\r\n    width: 32px;\r\n    background-color: #f8f9fa;\r\n    font-size: 12px;\r\n    font-family: sans-serif;\r\n  }\r\n\r\n  &_content {\r\n    overflow: hidden;\r\n    transition: max-height 0.3s ease-out;\r\n\r\n    &.loading, &.empty {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      max-height: 180px;\r\n      transition: max-height 0.3s ease-in;\r\n    }\r\n  }\r\n\r\n  &-body {\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n    height: 100%;\r\n  }\r\n\r\n  &-row {\r\n    display: flex;\r\n  }\r\n\r\n  &-cell {\r\n    flex: 1;\r\n    overflow-x: hidden;\r\n\r\n    &_data {\r\n      padding: 8px 16px;\r\n      overflow-x: hidden;\r\n      white-space: nowrap;\r\n      text-overflow: ellipsis;\r\n    }\r\n  }\r\n\r\n  &_empty-message {\r\n    margin: 25%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-style: italic;\r\n    font-family: sans-serif;\r\n    font-size: 16px;\r\n  }\r\n\r\n  &_loader {\r\n    animation: rotator $duration ease-in-out infinite;\r\n\r\n    @keyframes rotator {\r\n      0% {\r\n        transform: rotate(0deg);\r\n      }\r\n      100% {\r\n        transform: rotate(270deg);\r\n      }\r\n    }\r\n\r\n    circle {\r\n      stroke-dasharray: $offset;\r\n      stroke-dashoffset: 0;\r\n      transform-origin: center;\r\n      stroke: #1EA7FD;\r\n      animation: dash $duration ease-in-out infinite;\r\n    }\r\n\r\n    @keyframes dash {\r\n      0% {\r\n        stroke-dashoffset: $offset;\r\n      }\r\n      50% {\r\n        stroke-dashoffset: $offset / 4;\r\n        transform: rotate(135deg);\r\n      }\r\n      100% {\r\n        stroke-dashoffset: $offset;\r\n        transform: rotate(450deg);\r\n      }\r\n    }\r\n  }\r\n\r\n  .cdk-drag-placeholder {\r\n    opacity: 25%;\r\n  }\r\n\r\n  .cdk-virtual-scroll-content-wrapper {\r\n    width: 100% !important;\r\n  }\r\n\r\n  .cdk-virtual-scroll-viewport {\r\n    overflow-x: hidden;\r\n    overflow-y: overlay;\r\n\r\n    &>div {\r\n      width: 100%\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./ng-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "tableStore",
                        "type": "TableStore"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "tableStore",
                        "type": "TableStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "items": {
                    "name": "items",
                    "setSignature": {
                        "name": "items",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "colDefs": {
                    "name": "colDefs",
                    "setSignature": {
                        "name": "colDefs",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ui-search-input\r\n  (valueUpdate)=\"updateFilterString($event)\"\r\n  (colUpdate)=\"updateFilterCol($event)\"\r\n  [filterCol]=\"(filterCol$ | async)\"\r\n  [filterString]=\"(filterString$ | async)\"\r\n  [colDefs]=\"(colDefs$ | async)\"></ui-search-input>\r\n<div class=\"ng-table\">\r\n  <div class=\"ng-table-header\"\r\n    cdkDropList\r\n    [cdkDropListData]=\"colDefs\"\r\n    cdkDropListOrientation=\"horizontal\"\r\n    (cdkDropListDropped)=\"drop($event)\">\r\n\r\n    <ui-table-column\r\n      class=\"ng-table-column_component\"\r\n      *ngFor=\"let col of (colDefs$ | async)\"\r\n      [style.flex]=\"col.flex ? col.flex : 1\"\r\n      [sortBy]=\"sortBy\"\r\n      [col]=\"col\"\r\n      cdkDrag>\r\n\r\n      <div class=\"ng-table-col_filter-pill\" *ngIf=\"ruleDirection(col.key)\">\r\n        {{ruleIndex(col.key)}}\r\n        <ui-sort-icon  [direction]=\"ruleDirection(col.key)\"></ui-sort-icon>\r\n      </div>\r\n\r\n    </ui-table-column>\r\n  </div>\r\n\r\n  <div class=\"ng-table_content\"\r\n    [ngStyle]=\"createHeightObj((items$ | async))\"\r\n    [class.loading]=\"loading\"\r\n    [class.empty]=\"!(items$ | async).length\">\r\n    <ng-container\r\n      *ngIf=\"(items$ | async).length !== 0 && !loading\">\r\n      <div class=\"ng-table-body\"\r\n        [style.maxHeight.px]=\"maxHeight\">\r\n        <cdk-virtual-scroll-viewport\r\n          class=\"waddup\"\r\n          [style.height.px]=\"maxHeightForViewport((items$ | async))\"\r\n          itemSize=\"34\">\r\n          <div class=\"ng-table-row\"\r\n            *cdkVirtualFor=\"let item of (items$ | async)\">\r\n            <div class=\"ng-table-cell\"\r\n              [title]=\"item[col.key]\"\r\n              [style.flex]=\"col.flex ? col.flex : 1\"\r\n              *ngFor=\"let col of (colDefs$ | async)\">\r\n              <div class=\"ng-table-cell_data\">{{item[col.key]}}</div>\r\n            </div>\r\n          </div>\r\n        </cdk-virtual-scroll-viewport>\r\n      </div>\r\n    </ng-container>\r\n    \r\n    <div class=\"ng-table_empty-message\"\r\n      *ngIf=\"(items$ | async).length === 0 && !loading\">\r\n      No items found.\r\n    </div>\r\n\r\n    <div class=\"ng-table_empty-message\"\r\n      *ngIf=\"loading\">\r\n      <svg class=\"ng-table_loader\"\r\n        width=\"66\"\r\n        height=\"66\">\r\n        <circle\r\n          fill='none'\r\n          strokeWidth='6'\r\n          strokeLinecap='round'\r\n          cx='33'\r\n          cy='33'\r\n          r='30'\r\n        ></circle>\r\n      </svg>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "SearchInputComponent",
            "id": "component-SearchInputComponent-d06a37b8279e614cd61fcb0ee7837649",
            "file": "projects/ng-table/src/lib/components/searchInput/search-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-search-input",
            "styleUrls": [
                "./search-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colDefs",
                    "line": 11,
                    "type": "ColType[]"
                },
                {
                    "name": "filterCol",
                    "line": 17,
                    "type": "ColType | literal type"
                },
                {
                    "name": "filterString",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "colUpdate",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<ColType>"
                },
                {
                    "name": "valueUpdate",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "searchFilterChanged",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "updateFilterCol",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core'\r\nimport { ColType } from '../../types'\r\n\r\n@Component({\r\n  selector: 'ui-search-input',\r\n  templateUrl: './search-input.component.html',\r\n  styleUrls: ['./search-input.component.scss']\r\n})\r\nexport class SearchInputComponent {\r\n  @Input()\r\n  colDefs: ColType[]\r\n\r\n  @Input()\r\n  filterString: string\r\n\r\n  @Input()\r\n  filterCol: ColType | {}\r\n\r\n  // used to emit searchstring\r\n  @Output()\r\n  valueUpdate: EventEmitter<Event> = new EventEmitter()\r\n\r\n  // used to emit new col to search/filter by\r\n  @Output()\r\n  colUpdate: EventEmitter<ColType> = new EventEmitter()\r\n\r\n  searchFilterChanged = (event) => {\r\n    this.valueUpdate.emit(event)\r\n  }\r\n\r\n  updateFilterCol = (col: ColType) => {\r\n    this.colUpdate.emit(col)\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ng-table-search {\r\n  &_container {\r\n    display: flex;\r\n    box-shadow:\r\n      rgba(0, 0, 0, 0.2) 0px 2px 1px -1px,\r\n      rgba(0, 0, 0, 0.14) 0px 1px 1px 0px,\r\n      rgba(0, 0, 0, 0.12) 0px 1px 3px 0px;\r\n    border-radius: 3px;\r\n    width: fit-content;\r\n    align-items: center;\r\n    background-color: white;\r\n  }\r\n\r\n  &_dropdown {\r\n    &-menu {\r\n      background-color: white;\r\n      padding: 8px 0;\r\n      box-shadow:\r\n        rgba(0, 0, 0, 0.2) 0px 3px 1px -2px,\r\n        rgba(0, 0, 0, 0.14) 0px 2px 2px 0px,\r\n        rgba(0, 0, 0, 0.12) 0px 1px 5px 0px;\r\n      border-radius: 3px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      max-height: 120px;\r\n      overflow-y: auto;\r\n      width: 120px;\r\n      cursor: default;\r\n\r\n      &-item {\r\n        padding: 8px;\r\n        overflow-x: hidden;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          background-color: #f8f9fa;\r\n        }\r\n      }\r\n    }\r\n\r\n    &-button {\r\n      padding: 8px;\r\n      border-right: 1px solid rgba(224, 224, 224, 1);\r\n      display: flex;\r\n      align-items: center;\r\n      font-family: sans-serif;\r\n      font-size: 14px;\r\n      position: relative;\r\n      cursor: pointer;\r\n\r\n      ui-arrow-icon {\r\n        display: flex;\r\n      }\r\n\r\n      .ng-dropdown-menu {\r\n        position: absolute;\r\n        top: 100%;\r\n        margin-top: 4px;\r\n        left: -3px;\r\n        display: block;\r\n        \r\n        &.showing {\r\n          opacity: 1;\r\n          max-height: 120px;\r\n          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\r\n          transition: max-height 0.2s, opacity 0s ease-in;\r\n          z-index: 12;\r\n        }\r\n\r\n        &.hiding {\r\n          opacity: 0;\r\n          max-height: 0;\r\n          transition: max-height 0.2s ease-out;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &_input {\r\n    padding: 8px;\r\n    border: none;\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./search-input.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"ng-table-search_container\">\r\n  <div class=\"ng-table-search_dropdown-button\" uiDropdown>\r\n    <ng-container\r\n      *ngIf=\"filterCol.hasOwnProperty('label')\">\r\n      {{filterCol.label}}\r\n    </ng-container>\r\n    <ui-arrow-icon></ui-arrow-icon>\r\n    <div\r\n      class=\"ng-table-search_dropdown-menu\"\r\n      uiDropdownMenu>\r\n      <div\r\n        *ngFor=\"let col of colDefs\"\r\n        class=\"ng-table-search_dropdown-menu-item\"\r\n        (click)=\"updateFilterCol(col)\">\r\n        {{col.label}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <input\r\n    class=\"ng-table-search_input\"\r\n    placeholder=\"Search\"\r\n    (input)=\"searchFilterChanged($event)\" />\r\n</div>"
        },
        {
            "name": "SortIconComponent",
            "id": "component-SortIconComponent-2e5013c1a3ccaecb1e94f94133ad202d",
            "file": "projects/ng-table/src/lib/components/sortIcon/sort-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-sort-icon",
            "styleUrls": [
                "./sort-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sort-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "defaultValue": "'asc'",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'ui-sort-icon',\r\n  templateUrl: './sort-icon.component.html',\r\n  styleUrls: ['./sort-icon.component.scss']\r\n})\r\nexport class SortIconComponent {\r\n  @Input()\r\n  direction = 'asc'\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@mixin allSort {\r\n  margin-top: 2px;\r\n}\r\n\r\n.sort-icon {\r\n  &_asc {\r\n    @include allSort;\r\n    transform: scaleY(-1);\r\n  }\r\n\r\n  &_desc {\r\n    @include allSort;\r\n  }\r\n}",
                    "styleUrl": "./sort-icon.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<svg [ngClass]=\"{\r\n  'sort-icon_asc': direction === 'asc',\r\n  'sort-icon_desc': direction === 'desc'\r\n}\" xmlns=\"http://www.w3.org/2000/svg\" height=\"15\" viewBox=\"0 0 24 24\" width=\"15\">\r\n  <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n  <path d=\"M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z\"/>\r\n</svg>"
        },
        {
            "name": "TableColumnComponent",
            "id": "component-TableColumnComponent-cb21173866eaa1f3332f38eab4eb37c5",
            "file": "projects/ng-table/src/lib/components/tableColumn/table-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-table-column",
            "styleUrls": [
                "./table-column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "col",
                    "line": 14,
                    "type": "ColType"
                },
                {
                    "name": "sortBy",
                    "line": 17,
                    "type": "function"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colContainer",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'colContainer'"
                        }
                    ]
                },
                {
                    "name": "dragMove",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ElementRef, ViewChild } from '@angular/core'\r\nimport { CdkDragMove } from '@angular/cdk/drag-drop'\r\nimport { ColType } from '../../types'\r\n\r\n@Component({\r\n  selector: 'ui-table-column',\r\n  templateUrl: './table-column.component.html',\r\n  styleUrls: ['./table-column.component.scss']\r\n})\r\nexport class TableColumnComponent {\r\n  @ViewChild('colContainer') colContainer: ElementRef\r\n\r\n  @Input()\r\n  col: ColType\r\n\r\n  @Input()\r\n  sortBy: (key: string) => void\r\n\r\n  get colContainerElement(): HTMLElement {\r\n    return this.colContainer.nativeElement\r\n  }\r\n\r\n  dragMove = ($event: CdkDragMove<any>) => {\r\n    // default flex def to 1 if not provided\r\n    const currentFlex = this.col.flex || 1\r\n\r\n    // getting the container's right side abs value, and width\r\n    const { right, width } = this.colContainerElement.getBoundingClientRect()\r\n    const event = $event.event as MouseEvent\r\n\r\n    // get mouse's absolute x value, subtract container's right's abs x val\r\n    const distanceTraveled = event.x - right\r\n\r\n    // calc new width based on that delta\r\n    const newWidth = width + distanceTraveled\r\n\r\n    // calculate a ratio and apply it to the existing flex def\r\n    // because we're using flex and not raw pixel width vals\r\n    const widthRatio = newWidth / width\r\n    const newFlex = currentFlex * widthRatio\r\n\r\n    // pass it back to the obj so we can use it elsewhere\r\n    // probably can do this cleaner? TODO emit event maybe\r\n    this.col.flex = Math.max(Math.min(newFlex, 3), 0.25)\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".cdk-drag-preview {\r\n  opacity: 0;\r\n}\r\n\r\n.ng-table-col {\r\n  padding: 16px;\r\n  display: flex;\r\n  height: 20px;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex: 0;\r\n  cursor: pointer;\r\n  overflow-x: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n\r\n  &:not(:first-child) {\r\n    border-left: 1px solid black;\r\n  }\r\n\r\n  &_label {\r\n    text-overflow: ellipsis;\r\n    overflow-x: hidden;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  &_dragger {\r\n    width: 1px;\r\n    height: 100%;\r\n    border-right: 1px solid rgba(224, 224, 224, 1);\r\n    cursor: col-resize;\r\n    margin-left: 24px;\r\n  }\r\n\r\n  &_actions-container {\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n}",
                    "styleUrl": "./table-column.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "colContainerElement": {
                    "name": "colContainerElement",
                    "getSignature": {
                        "name": "colContainerElement",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 19
                    }
                }
            },
            "templateData": "<div class=\"ng-table-col\"\r\n  #colContainer\r\n  (click)=\"sortBy(col.key)\"\r\n  cdkDropList>\r\n  <div class=\"ng-table-col_label\"\r\n    [title]=\"col.label\">\r\n    {{col.label}}\r\n  </div>\r\n  <div class=\"ng-table-col_actions-container\">\r\n    <ng-content></ng-content>\r\n    <div\r\n      class=\"ng-table-col_dragger\"\r\n      cdkDrag\r\n      (cdkDragMoved)=\"dragMove($event)\"\r\n      cdkDragLockAxis=\"x\"></div>\r\n  </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PeopleService"
                        },
                        {
                            "name": "QueryFilterService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgTableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgTableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgTableComponent"
                        },
                        {
                            "name": "SortIconComponent"
                        },
                        {
                            "name": "TableColumnComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SearchInputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ArrowIconComponent"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "DropdownMenuDirective"
                        },
                        {
                            "name": "SearchInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "colDefs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ngTable.stories.ts",
                "type": "[]",
                "defaultValue": "[{\r\n  key: 'id',\r\n  label: 'User Id',\r\n  type: 'number'\r\n}, {\r\n  key: 'name',\r\n  label: 'Name',\r\n  type: 'string'\r\n}, {\r\n  key: 'title',\r\n  label: 'Title',\r\n  type: 'string'\r\n}, {\r\n  key: 'age',\r\n  label: 'Age',\r\n  type: 'number'\r\n}, {\r\n  key: 'hair',\r\n  label: 'Hair Color',\r\n  type: 'string'\r\n}]"
            },
            {
                "name": "colDefs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/data/index.ts",
                "type": "ColType[]",
                "defaultValue": "[\r\n  {\r\n    key: 'firstName',\r\n    label: 'First Name',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'lastName',\r\n    label: 'Last Name',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'id',\r\n    label: 'User Id',\r\n    type: 'number'\r\n  },\r\n  {\r\n    key: 'phone',\r\n    label: 'Phone Number',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'address1',\r\n    label: 'Street Address',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'company',\r\n    label: 'Company Name',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'email',\r\n    label: 'Email',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'job',\r\n    label: 'Job title',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'age',\r\n    label: 'Age',\r\n    type: 'number'\r\n  }\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-table/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "generateFakeUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/api/index.ts",
                "type": "",
                "defaultValue": "(): PersonType => {\r\n  return {\r\n    firstName: faker.name.firstName(),\r\n    lastName: faker.name.lastName(),\r\n    id: faker.random.number(),\r\n    phone: faker.phone.phoneNumberFormat(),\r\n    address1: faker.address.streetAddress(),\r\n    company: faker.company.companyName(),\r\n    email: faker.internet.email(),\r\n    job: faker.name.jobTitle(),\r\n    age: faker.random.number({\r\n      min: 18,\r\n      max: 80\r\n    })\r\n  }\r\n}"
            },
            {
                "name": "getData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/api/index.ts",
                "type": "",
                "defaultValue": "(): Promise<FakeApiType> => {\r\n  const fakeData = []\r\n  for (let i = 0; i < 250; i++) {\r\n    fakeData.push(generateFakeUser())\r\n  }\r\n  const response = new Promise<FakeApiType>((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve({ data: fakeData })\r\n    }, 1500)\r\n  })\r\n  return response\r\n}"
            },
            {
                "name": "initialPeopleState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/state/people.reducer.ts",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/state/loading.reducer.ts",
                "type": "",
                "defaultValue": "false"
            },
            {
                "name": "ITEM_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-table/src/lib/ng-table.component.ts",
                "type": "number",
                "defaultValue": "34"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ngTable.stories.ts",
                "type": "[]",
                "defaultValue": "[{\r\n  id: 1,\r\n  name: 'Bob Bobson',\r\n  title: 'Asst Regional Mgr',\r\n  age: 35,\r\n  hair: 'black'\r\n}, {\r\n  id: 2,\r\n  name: 'Paul Paulson',\r\n  title: 'Office Mgr',\r\n  age: 30,\r\n  hair: 'brown'\r\n}, {\r\n  id: 3,\r\n  name: 'Ann Annington',\r\n  title: 'Sr Engineer',\r\n  age: 27,\r\n  hair: 'purple'\r\n}, {\r\n  id: 4,\r\n  name: 'Ann Annington',\r\n  title: 'Sr Engineer',\r\n  age: 23,\r\n  hair: 'purple'\r\n}, {\r\n  id: 5,\r\n  name: 'Ann Annington',\r\n  title: 'Engineer',\r\n  age: 23,\r\n  hair: 'purple'\r\n}, {\r\n  id: 6,\r\n  name: 'Richard Richardson',\r\n  title: 'Sr Engineer',\r\n  age: 28,\r\n  hair: 'blonde'\r\n}, {\r\n  id: 7,\r\n  name: 'Juliet Juliets',\r\n  title: 'Dog Enthusiast',\r\n  age: 22,\r\n  hair: 'orange'\r\n}]"
            },
            {
                "name": "Overall",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ngTable.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/state/loading.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(setLoading, (state, { loading }) => loading)\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/state/people.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialPeopleState,\r\n  on(setData, (state, { data }) => [...data])\r\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-table/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "setData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/state/people.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Global State] set', props<{data: PersonType[]}>())"
            },
            {
                "name": "setLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/exampleApp/src/state/loading.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Loading State] set', props<{loading: boolean}>())"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ngTable.stories.ts",
                "type": "Story<NgTableComponent>",
                "defaultValue": "(args: NgTableComponent) => ({\r\n  component: NgTableComponent,\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "loadingReducer",
                "file": "projects/exampleApp/src/state/loading.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action",
                        "type": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "queryServiceFactory",
                "file": "projects/exampleApp/src/factories/queryService.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "queryFilterService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "queryFilterService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stateReducer",
                "file": "projects/exampleApp/src/state/people.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action",
                        "type": ""
                    }
                ],
                "returnType": "any[]",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ColType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-table/src/lib/types/index.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "FakeApiType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/exampleApp/src/api/index.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "PersonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/exampleApp/src/types/index.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "SortType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ng-table/src/lib/types/index.ts",
                "description": "",
                "kind": 165
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "stories/ngTable.stories.ts": [
                {
                    "name": "colDefs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ngTable.stories.ts",
                    "type": "[]",
                    "defaultValue": "[{\r\n  key: 'id',\r\n  label: 'User Id',\r\n  type: 'number'\r\n}, {\r\n  key: 'name',\r\n  label: 'Name',\r\n  type: 'string'\r\n}, {\r\n  key: 'title',\r\n  label: 'Title',\r\n  type: 'string'\r\n}, {\r\n  key: 'age',\r\n  label: 'Age',\r\n  type: 'number'\r\n}, {\r\n  key: 'hair',\r\n  label: 'Hair Color',\r\n  type: 'string'\r\n}]"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ngTable.stories.ts",
                    "type": "[]",
                    "defaultValue": "[{\r\n  id: 1,\r\n  name: 'Bob Bobson',\r\n  title: 'Asst Regional Mgr',\r\n  age: 35,\r\n  hair: 'black'\r\n}, {\r\n  id: 2,\r\n  name: 'Paul Paulson',\r\n  title: 'Office Mgr',\r\n  age: 30,\r\n  hair: 'brown'\r\n}, {\r\n  id: 3,\r\n  name: 'Ann Annington',\r\n  title: 'Sr Engineer',\r\n  age: 27,\r\n  hair: 'purple'\r\n}, {\r\n  id: 4,\r\n  name: 'Ann Annington',\r\n  title: 'Sr Engineer',\r\n  age: 23,\r\n  hair: 'purple'\r\n}, {\r\n  id: 5,\r\n  name: 'Ann Annington',\r\n  title: 'Engineer',\r\n  age: 23,\r\n  hair: 'purple'\r\n}, {\r\n  id: 6,\r\n  name: 'Richard Richardson',\r\n  title: 'Sr Engineer',\r\n  age: 28,\r\n  hair: 'blonde'\r\n}, {\r\n  id: 7,\r\n  name: 'Juliet Juliets',\r\n  title: 'Dog Enthusiast',\r\n  age: 22,\r\n  hair: 'orange'\r\n}]"
                },
                {
                    "name": "Overall",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ngTable.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ngTable.stories.ts",
                    "type": "Story<NgTableComponent>",
                    "defaultValue": "(args: NgTableComponent) => ({\r\n  component: NgTableComponent,\r\n  props: args,\r\n})"
                }
            ],
            "projects/exampleApp/src/data/index.ts": [
                {
                    "name": "colDefs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/data/index.ts",
                    "type": "ColType[]",
                    "defaultValue": "[\r\n  {\r\n    key: 'firstName',\r\n    label: 'First Name',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'lastName',\r\n    label: 'Last Name',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'id',\r\n    label: 'User Id',\r\n    type: 'number'\r\n  },\r\n  {\r\n    key: 'phone',\r\n    label: 'Phone Number',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'address1',\r\n    label: 'Street Address',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'company',\r\n    label: 'Company Name',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'email',\r\n    label: 'Email',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'job',\r\n    label: 'Job title',\r\n    type: 'string'\r\n  },\r\n  {\r\n    key: 'age',\r\n    label: 'Age',\r\n    type: 'number'\r\n  }\r\n]"
                }
            ],
            "projects/exampleApp/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ng-table/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-table/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-table/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/exampleApp/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/exampleApp/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "projects/exampleApp/src/api/index.ts": [
                {
                    "name": "generateFakeUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/api/index.ts",
                    "type": "",
                    "defaultValue": "(): PersonType => {\r\n  return {\r\n    firstName: faker.name.firstName(),\r\n    lastName: faker.name.lastName(),\r\n    id: faker.random.number(),\r\n    phone: faker.phone.phoneNumberFormat(),\r\n    address1: faker.address.streetAddress(),\r\n    company: faker.company.companyName(),\r\n    email: faker.internet.email(),\r\n    job: faker.name.jobTitle(),\r\n    age: faker.random.number({\r\n      min: 18,\r\n      max: 80\r\n    })\r\n  }\r\n}"
                },
                {
                    "name": "getData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/api/index.ts",
                    "type": "",
                    "defaultValue": "(): Promise<FakeApiType> => {\r\n  const fakeData = []\r\n  for (let i = 0; i < 250; i++) {\r\n    fakeData.push(generateFakeUser())\r\n  }\r\n  const response = new Promise<FakeApiType>((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve({ data: fakeData })\r\n    }, 1500)\r\n  })\r\n  return response\r\n}"
                }
            ],
            "projects/exampleApp/src/state/people.reducer.ts": [
                {
                    "name": "initialPeopleState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/state/people.reducer.ts",
                    "type": "[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/state/people.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialPeopleState,\r\n  on(setData, (state, { data }) => [...data])\r\n)"
                }
            ],
            "projects/exampleApp/src/state/loading.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/state/loading.reducer.ts",
                    "type": "",
                    "defaultValue": "false"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/state/loading.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(setLoading, (state, { loading }) => loading)\r\n)"
                }
            ],
            "projects/ng-table/src/lib/ng-table.component.ts": [
                {
                    "name": "ITEM_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-table/src/lib/ng-table.component.ts",
                    "type": "number",
                    "defaultValue": "34"
                }
            ],
            "projects/exampleApp/src/state/people.actions.ts": [
                {
                    "name": "setData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/state/people.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Global State] set', props<{data: PersonType[]}>())"
                }
            ],
            "projects/exampleApp/src/state/loading.actions.ts": [
                {
                    "name": "setLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/exampleApp/src/state/loading.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Loading State] set', props<{loading: boolean}>())"
                }
            ]
        },
        "groupedFunctions": {
            "projects/exampleApp/src/state/loading.reducer.ts": [
                {
                    "name": "loadingReducer",
                    "file": "projects/exampleApp/src/state/loading.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/exampleApp/src/factories/queryService.factory.ts": [
                {
                    "name": "queryServiceFactory",
                    "file": "projects/exampleApp/src/factories/queryService.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "queryFilterService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryFilterService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/exampleApp/src/state/people.reducer.ts": [
                {
                    "name": "stateReducer",
                    "file": "projects/exampleApp/src/state/people.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action",
                            "type": ""
                        }
                    ],
                    "returnType": "any[]",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ng-table/src/lib/types/index.ts": [
                {
                    "name": "ColType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-table/src/lib/types/index.ts",
                    "description": "",
                    "kind": 165
                },
                {
                    "name": "SortType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ng-table/src/lib/types/index.ts",
                    "description": "",
                    "kind": 165
                }
            ],
            "projects/exampleApp/src/api/index.ts": [
                {
                    "name": "FakeApiType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/exampleApp/src/api/index.ts",
                    "description": "",
                    "kind": 165
                }
            ],
            "projects/exampleApp/src/types/index.ts": [
                {
                    "name": "PersonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/exampleApp/src/types/index.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/exampleApp/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/exampleApp/e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/api/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "generateFakeUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/api/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/data/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colDefs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/factories/queryService.factory.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "queryServiceFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/services/people.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PeopleService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/services/queryFilter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "QueryFilterService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/loading.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/loading.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "loadingReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/loading.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/people.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/people.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "stateReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/people.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialPeopleState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/state/people.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/exampleApp/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/components/searchInput/components/arrowIcon/arrow-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ArrowIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/components/searchInput/directives/dropdownDirective/index.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/components/searchInput/directives/dropdownDirective/index.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownMenuDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/components/searchInput/search-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/components/sortIcon/sort-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/components/tableColumn/table-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/ng-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/ng-table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ITEM_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/ng-table.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableStore",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/lib/ng-table.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableState",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-table/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ngTable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colDefs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ngTable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ngTable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Overall",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ngTable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}